worker_processes  1;
daemon off;
error_log logs/error.log;
#pcre_jit on;
events {
    worker_connections 1024;
}

#env NGINX_PORT;
#env MIGRANTS_HOSTNAME;
#env PA_HOSTNAME;
#env NGO_HOSTNAME;
#env ANALYTIC_HOSTNAME;
#env CHATBOT_HOSTNAME;
 

http {
    #init_by_lua_block { 
 #       set $migrants_hostname 'return os.getenv("MIGRANTS_HOSTNAME")';
 #       set $pa_hostname 'return os.getenv("PA_HOSTNAME")';
 #       set $ngo_hostname 'return os.getenv("NGO_HOSTNAME")';
    #}

       

	sendfile on;
    resolver 127.0.0.11 valid=10s ipv6=off;

    server { # simple reverse-proxy for migrants application
        listen       8080;
        #server_name  $migrants_hostname;
        #server_name  $ENV{"MIGRANTS_HOSTNAME"};
        server_name  ${MIGRANTS_HOSTNAME};

        # serve static files
        location /  {
            root    /usr/share/nginx/html/migrants;
            try_files $uri $uri/ /index.html;
        }

        location /micado_img/ {
        alias /usr/share/nginx/html/images/;
        }
    }

    server { # simple reverse-proxy for pa application
        listen       8080;
        #server_name  $pa_hostname;
        server_name  ${PA_HOSTNAME};
        

        # serve static files
        location /  {
        root    /usr/share/nginx/html/pa;
        try_files $uri $uri/ /index.html;
        }
        location /micado_img/ {
        alias /usr/share/nginx/html/images/;
        }
    }

    server { # simple reverse-proxy for ngo application
        listen       8080;
        #server_name  $ngo_hostname;
        server_name  ${NGO_HOSTNAME};

        # serve static files
        location /  {
        root    /usr/share/nginx/html/ngo;
        try_files $uri $uri/ /index.html;
        }
        location /micado_img/ {
        alias /usr/share/nginx/html/images/;
        }
    }

    server {
        #set_by_lua $analytic_hostname 'return os.getenv("ANALYTIC_HOSTNAME")';
        listen   8080;
        listen   [::]:8080 ipv6only=on;
        #server_name  $analytic_hostname;
        server_name  ${ANALYTIC_HOSTNAME};

        access_log  off;

        location = /i {
            if ($http_content_type = "text/ping") {
                return 404;
            }
            resolver 127.0.0.11 valid=10s;
            set $upstream http://countly_api:3001;
            proxy_pass $upstream;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location ^~ /i/ {
            if ($http_content_type = "text/ping") {
                return 404;
            }
            resolver 127.0.0.11 valid=10s;
            set $upstream http://countly_api:3001;
            proxy_pass $upstream;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location = /o {
            if ($http_content_type = "text/ping") {
                return 404;
            }
            resolver 127.0.0.11 valid=10s;
            set $upstream http://countly_api:3001;
            proxy_pass $upstream;
        }

        location ^~ /o/ {
            if ($http_content_type = "text/ping") {
                return 404;
            }
        resolver 127.0.0.11 valid=10s;
        set $upstream http://countly_api:3001;
            proxy_pass $upstream;
        }

        location / {
            if ($http_content_type = "text/ping") {
                return 404;
            }
        resolver 127.0.0.11 valid=10s;
        set $upstream http://countly_frontend:6001;
            proxy_pass $upstream;
    #  		proxy_pass http://countly_frontend:6001;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    server {
        #set_by_lua $chatbot_hostname 'return os.getenv("CHATBOT_HOSTNAME")';
        listen 8080;
        #server_name  $chatbot_hostname;
        server_name  ${RASA_HOSTNAME};

        location / {
            default_type text/html;
            content_by_lua_block {
                        local cjson = require("cjson");

        		ngx.req.read_body()
                local body = ngx.req.get_body_data()
                local headers = ngx.req.get_headers()
                ngx.log(ngx.STDERR,body)
                -- ngx.log(ngx.STDERR,headers)
                if body then
                    local decoded_request = cjson.decode(body)
                    local decoded_app_message = cjson.decode(decoded_request.text)

		            local action = {
                        ["en"] = function (x)
                            ngx.log(ngx.STDERR,"Thank you")
    		                -- ngx.say("Thank you") 
                            -- ngx.say(decoded_app_message.lang)
		                end,
                        ["de"] = function (x) 
                            ngx.say("Danke") 
                        end,
                    }
		            local f = action[decoded_app_message.lang]
		            if(f) then
    	                f()
                    else
	                    ngx.say("None of the languages")
                    end
                end
            }
        }

        location = /webhooks/rocketchat/webhook {
 	        proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            resolver 127.0.0.11 valid=10s ipv6=off;
            if ($request_method !~* GET) {
                set $upstream '';
                access_by_lua_block{
                            local cjson = require("cjson");

                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                ngx.log(ngx.STDERR,body)
                ngx.log(ngx.STDERR,"before if")
                if body then
                    -- body like {sender:user_id, message:{lang:en, app_message:text}}
                    local decoded_request = cjson.decode(body)
                    local decoded_app_message = cjson.decode(decoded_request.text)
		            local action = {
                        ["en"] = function (x)
                            ngx.var.upstream = "chatbot_en:5005"
                            decoded_request.text=decoded_app_message.app_message
                            local chatbot_body = cjson.encode(decoded_request)
			                ngx.req.set_body_data(chatbot_body)
                            ngx.log(ngx.STDERR,"in en")
                            ngx.log(ngx.STDERR,body)
		                end,
                        ["de"] = function (x)
			                ngx.var.upstream = "chatbot_de:5005"
			                ngx.req.set_body_data(body)
 			            end,
                    }
		            local f = action[decoded_app_message.lang]
		            if(f) then
    	                f()
                    else
	                    ngx.say("None of the languages")
                    end
                end
            }

            proxy_pass http://$upstream/webhooks/rocketchat/webhook;
   
            }
        }
    }
}