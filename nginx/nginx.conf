worker_processes  1;
daemon off;
error_log /dev/stdout info;
events {
    worker_connections 4096;
}


http {
  include       /usr/local/openresty/nginx/conf/mime.types;
  default_type  application/octet-stream;   
  keepalive_timeout  65;

	sendfile on;
  resolver 127.0.0.11 valid=10s ipv6=off;
    access_log /dev/stdout;

    # server will close connection after this time -- default 75
    proxy_read_timeout 3600;


  server { # simple reverse-proxy for migrants application
      listen       80;
      server_name  ${MIGRANTS_HOSTNAME};

      # serve static files
      location /  {
        root    /usr/share/nginx/html/migrants;
        try_files $uri $uri/ /index.html;
        expires 1d;
        add_header Cache-Control "max-age=600";
      }

      location /micado_img/ {
      alias /usr/share/nginx/html/images/;
      expires 1d;
      add_header Cache-Control "max-age=600";
      }
      location /customcss/ {
      alias /usr/share/nginx/html/customcss/;
      expires 1d;
      add_header Cache-Control "max-age=600";
      }
  }

  server { # simple reverse-proxy for pa application
      listen       80;
      server_name  ${PA_HOSTNAME};
      

      # serve static files
      location /  {
      root    /usr/share/nginx/html/pa;
      try_files $uri $uri/ /index.html;
      }
      location /micado_img/ {
      alias /usr/share/nginx/html/images/;
      }
      location /customcss/ {
      alias /usr/share/nginx/html/customcss/;
      expires 1d;
      add_header Cache-Control "max-age=600";
      }
  }

  server { # simple reverse-proxy for ngo application
      listen       80;
      server_name  ${NGO_HOSTNAME};

      # serve static files
      location /  {
      root    /usr/share/nginx/html/ngo;
      try_files $uri $uri/ /index.html;
      }
      location /micado_img/ {
      alias /usr/share/nginx/html/images/;
      }
      location /customcss/ {
      alias /usr/share/nginx/html/customcss/;
      expires 1d;
      add_header Cache-Control "max-age=600";
      }
  }

    server {
        #set_by_lua $analytic_hostname 'return os.getenv("ANALYTIC_HOSTNAME")';
        listen   80;
        listen   [::]:80 ipv6only=on;
        server_name  ${ANALYTIC_HOSTNAME};

        access_log  off;

        location = /i {
            if ($http_content_type = "text/ping") {
                return 404;
            }
            resolver 127.0.0.11 valid=10s;
            set $upstream http://countly_api:3001;
            proxy_pass $upstream;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location ^~ /i/ {
            if ($http_content_type = "text/ping") {
                return 404;
            }
            resolver 127.0.0.11 valid=10s;
            set $upstream http://countly_api:3001;
            proxy_pass $upstream;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location = /o {
            if ($http_content_type = "text/ping") {
                return 404;
            }
            resolver 127.0.0.11 valid=10s;
            set $upstream http://countly_api:3001;
            proxy_pass $upstream;
        }

        location ^~ /o/ {
            if ($http_content_type = "text/ping") {
                return 404;
            }
        resolver 127.0.0.11 valid=10s;
        set $upstream http://countly_api:3001;
            proxy_pass $upstream;
        }

        location / {
            if ($http_content_type = "text/ping") {
                return 404;
            }
        resolver 127.0.0.11 valid=10s;
        set $upstream http://countly_frontend:6001;
            proxy_pass $upstream;
    #  		proxy_pass http://countly_frontend:6001;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

# this server is needed for rocketchat
    server {
        listen 80;
        server_name  ${RASA_HOSTNAME};

        location / {
            default_type text/html;
            content_by_lua_block {
                        local cjson = require("cjson");

        		ngx.req.read_body()
                local body = ngx.req.get_body_data()
                local headers = ngx.req.get_headers()
                ngx.log(ngx.STDERR,body)
                -- ngx.log(ngx.STDERR,headers)
                if body then
                    local decoded_request = cjson.decode(body)
                    local decoded_app_message = cjson.decode(decoded_request.text)

		            local action = {
                        ["en"] = function (x)
                            ngx.log(ngx.STDERR,"Thank you")
    		                -- ngx.say("Thank you") 
                            -- ngx.say(decoded_app_message.lang)
		                end,
                        ["de"] = function (x) 
                            ngx.say("Danke") 
                        end,
                    }
		            local f = action[decoded_app_message.lang]
		            if(f) then
    	                f()
                    else
	                    ngx.say("None of the languages")
                    end
                end
            }
        }

        location = /webhooks/rocketchat/webhook {
 	        proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            resolver 127.0.0.11 valid=10s ipv6=off;
            if ($request_method !~* GET) {
                set $upstream '';
                access_by_lua_block{
                            local cjson = require("cjson");

                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                ngx.log(ngx.STDERR,body)
                ngx.log(ngx.STDERR,"before if")
                if body then
                    -- body like {sender:user_id, message:{lang:en, app_message:text}}
                    local decoded_request = cjson.decode(body)
                    local decoded_app_message = cjson.decode(decoded_request.text)
		            local action = {
                        ["en"] = function (x)
                            ngx.var.upstream = "chatbot_en:5005"
                            decoded_request.text=decoded_app_message.message
                            local chatbot_body = cjson.encode(decoded_request)
			                ngx.req.set_body_data(chatbot_body)
                            ngx.log(ngx.STDERR,"in en")
                            ngx.log(ngx.STDERR,body)
                            ngx.log(ngx.STDERR,chatbot_body)
		                end,
                        ["de"] = function (x)
			                ngx.var.upstream = "chatbot_de:5005"
			                ngx.req.set_body_data(body)
 			            end,
                    }
		            local f = action[decoded_app_message.lang]
		            if(f) then
    	                f()
                    else
	                    ngx.say("None of the languages")
                    end
                end
            }

            proxy_pass http://$upstream/webhooks/rocketchat/webhook;
   
            }
        }
    }

    # this part is needed by rasax
    upstream docker-stack {
    server ${RASA_PRODUCTION_HOST} max_fails=0;
    }

    upstream docker-rasax-api {
    server ${RASA_X_HOST} max_fails=0;
    }

    server {
    listen            8080;
    #  include           /etc/nginx/conf.d/ssl.conf; # uncomment if using ssl; see ssl.conf.template for example configuration

    keepalive_timeout   30;
    client_max_body_size 800M;

    location /robots.txt {
        return 200 "User-agent: *\nDisallow: /\n";
    }

    location /core/ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_pass http://docker-stack/;
    }

    # avoid users having to change how they configure
    # their credentials URLs between Rasa and Rasa X
    location /webhooks/ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_pass http://docker-stack/webhooks/;
    }

    location /socket.io {
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_pass http://docker-stack/socket.io;
    }

    location /api/ws {
        # following https://www.serverlab.ca/tutorials/linux/web-servers-linux/how-to-configure-nginx-for-websockets/
        # This directive converts the incoming connection to HTTP 1.1, which is
        # required to support WebSockets. The older HTTP 1.0 spec does not provide support
        # for WebSockets, and any requests using HTTP 1.0 will fail.
        proxy_http_version 1.1;
        # Converts the proxied connection to type Upgrade. WebSockets only communicate on
        # Upgraded connections.
        proxy_set_header Upgrade $http_upgrade;
        # Ensure the Connection header value is upgrade
        proxy_set_header Connection "upgrade";

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_pass http://docker-rasax-api/api/ws;
    }

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_pass http://docker-rasax-api/;
    }

    # pass chat message to production service if environment query parameter
    # is set to `production`, or that parameter isn't set
    location /api/chat$ {
        if ($arg_environment = "") {
            rewrite ^ /core/webhooks/rasa/webhook last;
        }
        if ($arg_environment = "production") {
            rewrite ^ /core/webhooks/rasa/webhook last;
        }
        proxy_pass http://docker-rasax-api/api/chat;
    }

    location /nginx_status {
        stub_status on;

        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    }
}
