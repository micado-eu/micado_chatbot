version: "3.7"

x-database-credentials: &database-credentials
  DB_HOST: "micado_db"
  DB_PORT: "5432"
  DB_USER: "${RASA_DB_USER:-admin}"
  DB_PASSWORD: "${RASA_DB_PASSWORD}"
  DB_LOGIN_DB: "${POSTGRES_DB:-rasa}"

x-rabbitmq-credentials: &rabbitmq-credentials
  RABBITMQ_HOST: "rabbit"
  RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}

x-redis-credentials: &redis-credentials
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  REDIS_DB: "1"
  REDIS_CACHE_DB: "2"
  ACCEPTABLE_QUERY_COUNT_NUMBER: "50000"

x-duckling-credentials: &duckling-credentials
  RASA_DUCKLING_HTTP_URL: "http://duckling:8000"

x-nginx-host-variables: &nginx-host-variables
  RASA_X_HOST: "rasa-x:5002"
  RASA_USER_APP: "action_server:5055"
  RASA_PRODUCTION_HOST: "chatbot_en:5005"

x-rasax-credentials: &rasax-credentials
  RASA_X_HOST: "http://rasa-x:5002"
  RASA_X_USERNAME: ${RASA_X_USERNAME:-admin}
  RASA_X_PASSWORD: ${RASA_X_PASSWORD:-}
  RASA_X_TOKEN: ${RASA_X_TOKEN}
  JWT_SECRET: ${JWT_SECRET}
  RASA_USER_APP: "http://action_server:5055"
  RASA_PRODUCTION_HOST: "http://chatbot_en:5005"
  RASA_WORKER_HOST: "http://chatbot_en:5005"
  RASA_TOKEN: ${RASA_TOKEN}

x-rasa-credentials: &rasa-credentials
  <<: *rabbitmq-credentials
  <<: *rasax-credentials
  <<: *database-credentials
  <<: *redis-credentials
  <<: *duckling-credentials
  RASA_TOKEN: ${RASA_TOKEN}
  RASA_MODEL_PULL_INTERVAL: 10
  RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
  RASA_TELEMETRY_ENABLED: ${RASA_TELEMETRY_ENABLED:-true}

x-rasa-services: &default-rasa-service
  image: "rasa/rasa:${RASA_VERSION}-full"
  volumes:
    - ./rasa/.config:/.config
  expose:
    - "5005"

services:
  nginx:
    image: openresty/openresty:1.19.3.1-3-buster
    env_file:
      - .env
      - prod.env
    environment:
      <<: *nginx-host-variables
      MIGRANTS_HOSTNAME: ${MIGRANTS_HOSTNAME}
      PA_HOSTNAME: ${PA_HOSTNAME}
      NGO_HOSTNAME: ${NGO_HOSTNAME}
      ANALYTIC_HOSTNAME: ${ANALYTIC_HOSTNAME}
      RASA_HOSTNAME: ${RASA_HOSTNAME}
      NGINX_PORT: 80
    #    command:  "sh -c 'envsubst \$MIGRANTS_HOSTNAME, \$PA_HOSTNAME < /usr/local/openresty/nginx/conf/nginx.conf.template > /usr/local/openresty/nginx/conf/nginx.conf && /usr/bin/openresty -g daemon off;'"
    #command:  sh -c "env && envsubst '${MIGRANTS_HOSTNAME} ${PA_HOSTNAME}' < /usr/local/openresty/nginx/conf/nginx.conf.template > /usr/local/openresty/nginx/conf/nginx.conf && cat /usr/local/openresty/nginx/conf/nginx.conf && /usr/bin/openresty -g daemon off;"
    command: ["/run.sh"]

    #\'${MIGRANTS_HOSTNAME} ${PA_HOSTNAME}\'
    volumes:
      #      - $PWD/nginx/default.conf:/etc/nginx/conf.d/default.conf
      #      - ./nginx/default.conf:/etc/nginx/templates/default.conf.template
      #      - $PWD/nginx/nginx.conf:/etc/nginx/nginx.conf
      - $PWD/nginx/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf.template
      - $PWD/html/index_m.html:/usr/share/nginx/html/migrants/index.html
      - $PWD/html/index_p.html:/usr/share/nginx/html/pa/index.html
      - $PWD/html/index_n.html:/usr/share/nginx/html/ngo/index.html
      - $PWD/nginx/run.sh:/run.sh
    ports:
      - "8080:8080"
    networks:
      - micado_net

  chatbot_en:
    <<: *default-rasa-service
    user: 1000:1000
    container_name: chatbot_en
    env_file:
      - .env
      - prod.env
    #   volumes:
    #     - /home/gioppo/Development/dockerfiles/micado_new/rasa:/app
    #    entrypoint: python multibot.py
    environment:
      <<: *rasa-credentials
      RASA_ENVIRONMENT: "production"
      DB_DATABASE: "tracker"
      MPLCONFIGDIR: "/tmp/.matplotlib"
      RASA_MODEL_SERVER: "http://rasa-x:5002/api/projects/default/models/tags/production"
    command: >
      x
      --no-prompt
      --production
      --config-endpoint http://rasa-x:5002/api/config?token=${RASA_X_TOKEN}
      --port 5005
      --debug
      --jwt-method HS256
      --jwt-secret ${JWT_SECRET}
      --auth-token '${RASA_TOKEN}'
      --cors "*"
      -m rasa/models/micado_en.tar.gz
      --enable-api
    ports:
      - "5005:5005"
    volumes:
      - type: volume
        source: chatbot_data
        # target is the path in the container
        target: /app
      - ./rasa/.config:/.config
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    networks:
      - micado_net

  chatbot_de:
    image: rasa/rasa:2.3.1-full
    user: 1000:1000
    container_name: chatbot_de
    env_file:
      - .env
      - prod.env
    #   volumes:
    #     - /home/gioppo/Development/dockerfiles/micado_new/rasa:/app
    #    entrypoint: python multibot.py
    environment:
      RABBITMQ_HOST: "rabbit"
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RASA_X_HOST: "http://rasa-x:5002"
      RASA_X_USERNAME: ${RASA_X_USERNAME:-admin}
      RASA_X_PASSWORD: ${RASA_X_PASSWORD:-}
      RASA_X_TOKEN: ${RASA_X_TOKEN}
      JWT_SECRET: ${JWT_SECRET}
      RASA_USER_APP: "http://action_server:5055"
      RASA_PRODUCTION_HOST: "http://chatbot_en:5005"
      RASA_WORKER_HOST: "http://chatbot_en:5005"
      RASA_TOKEN: ${RASA_SECRET}
      RASA_MODEL_SERVER: "http://rasa-x:5002/api/projects/default/models/tags/production"
    command:
      #      - python
      #      - micado.py
      #      - train
      - run
      - --cors
      - "*"
      - -p
      - "5005"
      - -m
      - rasa/models/micado_en.tar.gz
      - --enable-api
      - --auth-token
      - "${RASA_SECRET}"
    volumes:
      - type: volume
        source: chatbot_data
        # target is the path in the container
        target: /app
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    networks:
      - micado_net

  chatbot_shell:
    image: rasa/rasa:2.3.1-full
    user: 1000:1000
    env_file:
      - .env
      - prod.env
    #   volumes:
    #     - /home/gioppo/Development/dockerfiles/micado_new/rasa:/app
    #    entrypoint: python multibot.py
    environment:
      RABBITMQ_HOST: "rabbit"
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RASA_X_HOST: "http://rasa-x:5002"
      RASA_X_USERNAME: ${RASA_X_USERNAME:-admin}
      RASA_X_PASSWORD: ${RASA_X_PASSWORD:-}
      RASA_X_TOKEN: ${RASA_X_TOKEN}
      JWT_SECRET: ${JWT_SECRET}
      RASA_USER_APP: "http://action_server:5055"
      RASA_PRODUCTION_HOST: "http://chatbot_en:5005"
      RASA_WORKER_HOST: "http://chatbot_en:5005"
      RASA_TOKEN: ${RASA_SECRET}
    command:
      #      - python
      #      - micado.py
      #      - train
      - shell
      - --debug
      - -p
      - "5005"
      - -m
      - rasa/models/micado_en.tar.gz
      - --enable-api
      - --auth-token
      - "${RASA_SECRET}"
    ports:
      - "5005:5005"
    volumes:
      - type: volume
        source: chatbot_data
        # target is the path in the container
        target: /app
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    networks:
      - micado_net

  chatbot_train:
    image: rasa/rasa:2.3.1-full
    user: 1000:1000
    env_file:
      - .env
      - prod.env
    #   volumes:
    #     - /home/gioppo/Development/dockerfiles/micado_new/rasa:/app
    #    entrypoint: python multibot.py
    environment:
      RABBITMQ_HOST: "rabbit"
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RASA_X_HOST: "http://rasa-x:5002"
      RASA_X_USERNAME: ${RASA_X_USERNAME:-admin}
      RASA_X_PASSWORD: ${RASA_X_PASSWORD:-}
      RASA_X_TOKEN: ${RASA_X_TOKEN}
      JWT_SECRET: ${JWT_SECRET}
      RASA_USER_APP: "http://action_server:5055"
      RASA_PRODUCTION_HOST: "http://chatbot_en:5005"
      RASA_WORKER_HOST: "http://chatbot_en:5005"
      RASA_TOKEN: ${RASA_SECRET}
    command:
      #      - python
      #      - micado.py
      - train
      - --fixed-model-name
      - micado_en

    ports:
      - "5005:5005"
    volumes:
      - type: volume
        source: chatbot_data
        # target is the path in the container
        target: /app
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    networks:
      - micado_net

  rasa-x:
    image: "rasa/rasa-x:${RASA_X_VERSION}"
    user: 1000:1000
    #    expose:
    #      - "5002"
    #    volumes:
    #      - ./rasax/environments.yml:/app/environments.yml
    #      - ./rasax/credentials.yml:/app/credentials.yml
    #      - ./rasax/endpoints.yml:/app/endpoints.yml
    expose:
      - "5002"
    volumes:
      - ./rasax/models:/app/models
      - ./rasax/environments.yml:/app/environments.yml
      - ./rasax/credentials.yml:/app/credentials.yml
      - ./rasax/endpoints.yml:/app/endpoints.yml
      - ./rasax/logs:/logs
      - ./rasax/auth:/app/auth
    #      - type: volume
    #        source: rasax_data
    #        # target is the path in the container
    #        target: /app
    #      - ./models:/app/models
    #      - ./environments.yml:/app/environments.yml
    #      - ./credentials.yml:/app/credentials.yml
    #      - ./endpoints.yml:/app/endpoints.yml
    #      - ./logs:/logs
    #      - ./auth:/app/auth
    environment:
      <<: *database-credentials
      <<: *rasa-credentials
      SELF_PORT: "5002"
      DB_DATABASE: "${POSTGRES_DB:-rasa}"
      RASA_MODEL_DIR: "/app/models"
      PASSWORD_SALT: ${PASSWORD_SALT}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
      RASA_X_USER_ANALYTICS: "0"
      SANIC_RESPONSE_TIMEOUT: "3600"
      RUN_DATABASE_MIGRATION_AS_SEPARATE_SERVICE: "true"
      DEBUG_MODE: "true"
    networks:
      - micado_net
    ports:
      - "5002:5002"

  db-migration:
    entrypoint: ["python"]
    command: ["-m", "rasax.community.services.db_migration_service"]
    image: "rasa/rasa-x:${RASA_X_VERSION}"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || kill 1"]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 2s
    expose:
      - "8000"
    environment:
      <<: *database-credentials
      DB_DATABASE: "${POSTGRES_DB:-rasa}"
      RUN_DATABASE_MIGRATION_AS_SEPARATE_SERVICE: "true"
      MPLCONFIGDIR: "/tmp/.matplotlib"
    networks:
      - micado_net

  rabbit:
    #    restart: always
    image: "bitnami/rabbitmq:3.8.9"
    environment:
      <<: *rabbitmq-credentials
      RABBITMQ_DISK_FREE_ABSOLUTE_LIMIT: 512mb
    expose:
      - "5672"
    networks:
      - micado_net

  redis:
    image: "bitnami/redis:6.2.1"
    environment:
      <<: *redis-credentials
    expose:
      - "6379"
    networks:
      - micado_net

  action_server:
    image: rasa/rasa-sdk:2.3.1
    volumes:
      - type: volume
        source: chatbot_action
        # target is the path in the container
        target: /app/actions
    expose:
      - 5055
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    networks:
      - micado_net

  duckling_server:
    image: rasa/duckling:0.1.6.5
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    networks:
      - micado_net

  micado_db:
    image: groonga/pgroonga:2.2.6-alpine-11-slim
    env_file:
      - .env
      - prod.env
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
      - type: volume
        source: postgres_init
        target: /docker-entrypoint-initdb.d
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    networks:
      - micado_net

volumes:
  chatbot_data:
    driver: local
    driver_opts:
      type: none
      # device is the path in the host that has to be absolute
      device: $PWD/rasa
      o: bind
  rasax_data:
    driver: local
    driver_opts:
      type: none
      # device is the path in the host that has to be absolute
      device: $PWD/rasax
      o: bind
  chatbot_action:
    driver: local
    driver_opts:
      type: none
      # device is the path in the host that has to be absolute
      device: $PWD/rasa/actions
      o: bind
  postgres_data:
    driver: local
    driver_opts:
      type: none
      # device is the path in the host that has to be absolute
      device: $PWD/db_data
      o: bind
  postgres_init:
    driver: local
    driver_opts:
      type: none
      # device is the path in the host that has to be absolute
      device: $PWD/db_init
      o: bind

networks:
  micado_net:
    driver: bridge
#    external: true
#    ipam:
#      driver: default
#      config:
#        - subnet: 172.24.0.0/16
